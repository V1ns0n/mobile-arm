#include<sys/types.h>
#include<sys/socket.h>
#include<unistd.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<stdio.h>
#include<stdlib.h>
#include<errno.h>
#include<netdb.h>
#include<stdarg.h>
#include<string.h>

#include "egm.pb.h" // generated by Google protoc.exe

#define SERVER_PORT 6510
#define BUFFER_SIZE 1400
static unsigned int sequenceNumber = 0;
using namespace std;
using namespace abb::egm;

// 返回自系统开机以来的毫秒数（tick）
unsigned long GetTickCount()
{
    struct timespec ts;

     clock_gettime(CLOCK_MONOTONIC, &ts);

     return (ts.tv_sec * 1000 + ts.tv_nsec / 1000000);
}

// Create a simple sensor message
void CreateRobotMessage(EgmRobot* pRobotMessage)
{
    EgmHeader* header = new EgmHeader();
    header->set_mtype(EgmHeader_MessageType_MSGTYPE_DATA);
    header->set_seqno(sequenceNumber++);
    header->set_tm(GetTickCount());

    pRobotMessage->set_allocated_header(header);

    EgmMotorState* motor_state = new EgmMotorState();
    motor_state->set_state(EgmMotorState_MotorStateType_MOTORS_ON);

    pRobotMessage->set_allocated_motorstate(motor_state);
}

// Display inbound robot message
void DisplaySensorMessage(EgmSensor *pSensorMessage)
{
    if (pSensorMessage->has_header() && pSensorMessage->header().has_seqno() && pSensorMessage->header().has_tm() && pSensorMessage->header().has_mtype())
    {
        printf("SeqNo=%d Tm=%u Type=%d\n", pSensorMessage->header().seqno(), pSensorMessage->header().tm(), pSensorMessage->header().mtype());
        printf("EgmCartesian x=%lf y=%lf z=%lf\n", pSensorMessage->planned().cartesian().pos().x(),pSensorMessage->planned().cartesian().pos().y(),pSensorMessage->planned().cartesian().pos().z());
    }
    else
    {
        printf("No header\n");
    }
}

int main()
{
 /* 服务端地址 */
 struct sockaddr_in server_addr;
 socklen_t server_addr_length = sizeof(server_addr);
 bzero(&server_addr, sizeof(server_addr));
 server_addr.sin_family = AF_INET;
 server_addr.sin_addr.s_addr = inet_addr("192.168.1.19");
 server_addr.sin_port = htons(SERVER_PORT);

 /* 创建socket */
 int client_socket_fd = socket(AF_INET, SOCK_DGRAM, 0);
 if(client_socket_fd < 0)
 {
  perror("Create Socket Failed:");
  exit(1);
 }

 string messageBuffer;
 // create and send a sensor message
EgmRobot *pRobotMessage = new EgmRobot();
CreateRobotMessage(pRobotMessage);
pRobotMessage->SerializeToString(&messageBuffer);
 /* send data */
 if(sendto(client_socket_fd, messageBuffer.c_str(), messageBuffer.length(),0,(struct sockaddr*)&server_addr,sizeof(server_addr)) < 0)
 {
  perror("Send data Failed:");
  exit(1);
 }
 delete pRobotMessage;

 /* 接收数据 */
 char protoMessage[BUFFER_SIZE];
 while(1)
 {
     bzero(protoMessage, BUFFER_SIZE);
     int n=recvfrom(client_socket_fd, protoMessage, BUFFER_SIZE,0,(struct sockaddr*)&server_addr, &server_addr_length);
     if( n== -1)
     {
      perror("Receive Data Failed:");
      exit(1);
     }

     // deserialize inbound message
      EgmSensor *pSensorMessage = new EgmSensor();
      pSensorMessage->ParseFromArray(protoMessage, n);
      DisplaySensorMessage(pSensorMessage);
      delete pSensorMessage;
 }

 close(client_socket_fd);
 return 0;
}



